//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.17929
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess.CategoryService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CategoryService.ICategoryService")]
    public interface ICategoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetById", ReplyAction="http://tempuri.org/ICategoryService/GetByIdResponse")]
        DataContracts.Category GetById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetById", ReplyAction="http://tempuri.org/ICategoryService/GetByIdResponse")]
        System.Threading.Tasks.Task<DataContracts.Category> GetByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetAll", ReplyAction="http://tempuri.org/ICategoryService/GetAllResponse")]
        System.Collections.Generic.List<DataContracts.Category> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetAll", ReplyAction="http://tempuri.org/ICategoryService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DataContracts.Category>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/Insert", ReplyAction="http://tempuri.org/ICategoryService/InsertResponse")]
        void Insert(DataContracts.Category entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/Insert", ReplyAction="http://tempuri.org/ICategoryService/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(DataContracts.Category entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/Update", ReplyAction="http://tempuri.org/ICategoryService/UpdateResponse")]
        void Update(DataContracts.Category entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/Update", ReplyAction="http://tempuri.org/ICategoryService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(DataContracts.Category entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/Delete", ReplyAction="http://tempuri.org/ICategoryService/DeleteResponse")]
        void Delete(DataContracts.Category entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/Delete", ReplyAction="http://tempuri.org/ICategoryService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(DataContracts.Category entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICategoryServiceChannel : DataAccess.CategoryService.ICategoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CategoryServiceClient : System.ServiceModel.ClientBase<DataAccess.CategoryService.ICategoryService>, DataAccess.CategoryService.ICategoryService {
        
        public CategoryServiceClient() {
        }
        
        public CategoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DataContracts.Category GetById(int id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<DataContracts.Category> GetByIdAsync(int id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public System.Collections.Generic.List<DataContracts.Category> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DataContracts.Category>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Insert(DataContracts.Category entity) {
            base.Channel.Insert(entity);
        }
        
        public System.Threading.Tasks.Task InsertAsync(DataContracts.Category entity) {
            return base.Channel.InsertAsync(entity);
        }
        
        public void Update(DataContracts.Category entity) {
            base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(DataContracts.Category entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public void Delete(DataContracts.Category entity) {
            base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(DataContracts.Category entity) {
            return base.Channel.DeleteAsync(entity);
        }
    }
}
