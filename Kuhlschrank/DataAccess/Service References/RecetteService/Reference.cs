//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18052
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess.RecetteService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RecetteService.IRecetteService")]
    public interface IRecetteService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/GetRecetteFromProducts", ReplyAction="http://tempuri.org/IRecetteService/GetRecetteFromProductsResponse")]
        System.Collections.Generic.List<DataContracts.Recette> GetRecetteFromProducts(System.Collections.Generic.List<DataContracts.Product> products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/GetRecetteFromProducts", ReplyAction="http://tempuri.org/IRecetteService/GetRecetteFromProductsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DataContracts.Recette>> GetRecetteFromProductsAsync(System.Collections.Generic.List<DataContracts.Product> products);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/GetById", ReplyAction="http://tempuri.org/IRecetteService/GetByIdResponse")]
        DataContracts.Recette GetById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/GetById", ReplyAction="http://tempuri.org/IRecetteService/GetByIdResponse")]
        System.Threading.Tasks.Task<DataContracts.Recette> GetByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/GetAll", ReplyAction="http://tempuri.org/IRecetteService/GetAllResponse")]
        System.Collections.Generic.List<DataContracts.Recette> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/GetAll", ReplyAction="http://tempuri.org/IRecetteService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<DataContracts.Recette>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/Insert", ReplyAction="http://tempuri.org/IRecetteService/InsertResponse")]
        void Insert(DataContracts.Recette entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/Insert", ReplyAction="http://tempuri.org/IRecetteService/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(DataContracts.Recette entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/Update", ReplyAction="http://tempuri.org/IRecetteService/UpdateResponse")]
        void Update(DataContracts.Recette entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/Update", ReplyAction="http://tempuri.org/IRecetteService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(DataContracts.Recette entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/Delete", ReplyAction="http://tempuri.org/IRecetteService/DeleteResponse")]
        void Delete(DataContracts.Recette entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecetteService/Delete", ReplyAction="http://tempuri.org/IRecetteService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(DataContracts.Recette entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecetteServiceChannel : DataAccess.RecetteService.IRecetteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecetteServiceClient : System.ServiceModel.ClientBase<DataAccess.RecetteService.IRecetteService>, DataAccess.RecetteService.IRecetteService {
        
        public RecetteServiceClient() {
        }
        
        public RecetteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecetteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecetteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecetteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<DataContracts.Recette> GetRecetteFromProducts(System.Collections.Generic.List<DataContracts.Product> products) {
            return base.Channel.GetRecetteFromProducts(products);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DataContracts.Recette>> GetRecetteFromProductsAsync(System.Collections.Generic.List<DataContracts.Product> products) {
            return base.Channel.GetRecetteFromProductsAsync(products);
        }
        
        public DataContracts.Recette GetById(int id) {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<DataContracts.Recette> GetByIdAsync(int id) {
            return base.Channel.GetByIdAsync(id);
        }
        
        public System.Collections.Generic.List<DataContracts.Recette> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<DataContracts.Recette>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public void Insert(DataContracts.Recette entity) {
            base.Channel.Insert(entity);
        }
        
        public System.Threading.Tasks.Task InsertAsync(DataContracts.Recette entity) {
            return base.Channel.InsertAsync(entity);
        }
        
        public void Update(DataContracts.Recette entity) {
            base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(DataContracts.Recette entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public void Delete(DataContracts.Recette entity) {
            base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(DataContracts.Recette entity) {
            return base.Channel.DeleteAsync(entity);
        }
    }
}
